{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\8Eighth Semester\\\\BLN\\\\Project\\\\now-ui-kit-react-master\\\\src\\\\views\\\\App.js\";\nimport { Table, Container, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport Web3 from 'web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash'; //header\n//Setting Web3\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nfunction App() {\n  React.state = {\n    ipfsHash: null,\n    buffer: '',\n    ethAddress: '',\n    blockNumber: '',\n    transactionHash: '',\n    gasUsed: '',\n    txReceipt: ''\n  };\n\n  function captureFile(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => this.convertToBuffer(reader);\n  }\n\n  ;\n\n  async function convertToBuffer(reader) {\n    //file is converted to a buffer to prepare for uploading to IPFS\n    const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n    this.setState({\n      buffer\n    });\n  }\n\n  async function onClick() {\n    try {\n      this.setState({\n        blockNumber: \"waiting..\"\n      });\n      this.setState({\n        gasUsed: \"waiting...\"\n      }); // get Transaction Receipt in console on click\n      // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n      await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n        console.log(err, txReceipt);\n        this.setState({\n          txReceipt\n        });\n      }); //await for getTransactionReceipt\n\n      await this.setState({\n        blockNumber: this.state.txReceipt.blockNumber\n      });\n      await this.setState({\n        gasUsed: this.state.txReceipt.gasUsed\n      });\n    } //try\n    catch (error) {\n      console.log(error);\n    } //catch\n\n  } //onClick\n\n\n  async function onSubmit(event) {\n    event.preventDefault();\n\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n        //bring in user's metamask account address\n\n        const accounts = await web3.eth.getAccounts();\n        console.log('Sending from Metamask account: ' + accounts[0]); //obtain contract address from storehash.js\n\n        const ethAddress = await storehash.options.address;\n        this.setState({\n          ethAddress\n        }); //save document to IPFS,return its hash#, and set hash# to state\n        //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n        await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n          console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n          this.setState({\n            ipfsHash: ipfsHash[0].hash\n          }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n          //return the transaction hash from the ethereum contract\n          //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n          storehash.methods.sendHash(this.state.ipfsHash * 10000000000).send({\n            from: accounts[0]\n          }, (error, transactionHash) => {\n            console.log(transactionHash);\n            this.setState({\n              transactionHash\n            });\n          }); //storehash \n        }); //await ipfs.add \n      } catch (error) {\n        alert(\"Permission to Access MetaMask Denied\");\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        window.web3 = new Web3(web3.currentProvider); // Acccounts always exposed\n\n        web3.eth.sendTransaction({\n          /* ... */\n        });\n      } // Non-dapp browsers...\n      else {\n          console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n  }\n\n  ; //onSubmit \n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \" Choose file to send to IPFS \"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: this.captureFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 14\n    }\n  }, \"Send it\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: this.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \" Get Transaction Receipt \"), /*#__PURE__*/React.createElement(Table, {\n    bordered: true,\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Tx Receipt Category\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, \"Values\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, \"IPFS Hash # stored on Eth Contract\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, this.state.ipfsHash)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"Ethereum Contract Address\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, this.state.ethAddress)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"Tx Hash # \"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, this.state.transactionHash)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, \"Block Number # \"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, this.state.blockNumber)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, \"Gas Used\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, this.state.gasUsed)))))));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/University/8Eighth Semester/BLN/Project/now-ui-kit-react-master/src/views/App.js"],"names":["Table","Container","Button","Form","React","Component","Web3","ipfs","storehash","web3","window","currentProvider","App","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","eth","getTransactionReceipt","err","console","log","error","onSubmit","ethereum","enable","accounts","getAccounts","options","address","add","hash","methods","sendHash","send","alert","sendTransaction"],"mappings":"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","sourcesContent":["import {Table, Container, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\n//import logo from './logo.svg';\nimport Web3 from 'web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n//header\n//Setting Web3\nconst web3 = new Web3(window.web3.currentProvider);\nfunction App() {\n \n    React.state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    };\n   \n    function captureFile(event) {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)    \n      };\n\n    async function convertToBuffer(reader) {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    }\n\n    async function onClick() {\n\n    try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n  async function onSubmit(event){\n      event.preventDefault();\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n            // Acccounts now exposed\n            \n                 //bring in user's metamask account address\n                const accounts = await web3.eth.getAccounts();\n              \n                console.log('Sending from Metamask account: ' + accounts[0]);\n\n                //obtain contract address from storehash.js\n                const ethAddress= await storehash.options.address;\n                this.setState({ethAddress});\n\n                //save document to IPFS,return its hash#, and set hash# to state\n                //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n                await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n                  console.log(err,ipfsHash);\n                  //setState by setting ipfsHash to ipfsHash[0].hash \n                  this.setState({ ipfsHash:ipfsHash[0].hash });\n\n                  // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n                  //return the transaction hash from the ethereum contract\n                  //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n                  \n                  storehash.methods.sendHash(this.state.ipfsHash*10000000000).send({\n                    from: accounts[0] \n                  }, (error, transactionHash) => {\n                    console.log(transactionHash);\n                    this.setState({transactionHash});\n                  }); //storehash \n                }) //await ipfs.add \n\n\n        } catch (error) {\n            alert(\"Permission to Access MetaMask Denied\");\n        }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n        window.web3 = new Web3(web3.currentProvider);\n        // Acccounts always exposed\n        web3.eth.sendTransaction({/* ... */});\n    }\n    // Non-dapp browsers...\n    else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n\n      \n    }; //onSubmit \n  \n\n      \n      return (\n        <>\n        <div className=\"App\">\n          <hr />\n        <Container>\n          <h3> Choose file to send to IPFS </h3>\n          <Form onSubmit={onSubmit}>\n            <input \n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button \n             variant=\"success\"\n             type=\"submit\"> \n             Send it \n             </Button>\n          </Form>\n          <hr/>\n            <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n              <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash # stored on Eth Contract</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Tx Hash # </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Block Number # </td>\n                    <td>{this.state.blockNumber}</td>\n                  </tr>\n\n                  <tr>\n                    <td>Gas Used</td>\n                    <td>{this.state.gasUsed}</td>\n                  </tr>                \n                </tbody>\n            </Table>\n        </Container>\n     </div>\n     </>\n      );\n   \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}