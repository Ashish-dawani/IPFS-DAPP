{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\8Eighth Semester\\\\BLN\\\\Project\\\\now-ui-kit-react-master\\\\src\\\\views\\\\examples\\\\Test.js\";\nimport React, { Component } from \"react\"; // reactstrap components\n\nimport { Button, Input, Container, Form, Table } from \"reactstrap\";\nimport web3 from '../web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass Test extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting...\"\n        }); // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        }); //await for getTransactionReceipt\n\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } //try\n      catch (error) {\n        console.log(error);\n      } //catch\n\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n\n      if (window.ethereum) {\n        window.web3 = new Web3(ethereum);\n\n        try {\n          // Request account access if needed\n          await ethereum.enable(); // Acccounts now exposed\n          //bring in user's metamask account address\n\n          const accounts = await web3.eth.getAccounts();\n          console.log('Sending from Metamask account: ' + accounts[0]); //obtain contract address from storehash.js\n\n          const ethAddress = await storehash.options.address;\n          this.setState({\n            ethAddress\n          }); //save document to IPFS,return its hash#, and set hash# to state\n          //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n          await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n            console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n            this.setState({\n              ipfsHash: ipfsHash[0].hash\n            }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n            //return the transaction hash from the ethereum contract\n            //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n            storehash.methods.sendHash(this.state.ipfsHash * 10000000000).send({\n              from: accounts[0]\n            }, (error, transactionHash) => {\n              console.log(transactionHash);\n              this.setState({\n                transactionHash\n              });\n            }); //storehash \n          }); //await ipfs.add \n        } catch (error) {\n          alert(\"Permission to Access MetaMask Denied\");\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          window.web3 = new Web3(web3.currentProvider); // Acccounts always exposed\n\n          web3.eth.sendTransaction({\n            /* ... */\n          });\n        } // Non-dapp browsers...\n        else {\n            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n          }\n    };\n  }\n\n  //onSubmit \n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, \" Choose file to send to IPFS \"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 14\n      }\n    }, \"Send it\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.onClickF(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, \" Get Transaction Receipt \"), /*#__PURE__*/React.createElement(Table, {\n      bordered: true,\n      responsive: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, \"Tx Receipt Category\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, \"Values\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, \"IPFS Hash # stored on Eth Contract\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, this.state.ipfsHash)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, \"Ethereum Contract Address\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, this.state.ethAddress)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, \"Tx Hash # \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, this.state.transactionHash)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, \"Block Number # \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, this.state.blockNumber)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, \"Gas Used\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, this.state.gasUsed))))));\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["D:/University/8Eighth Semester/BLN/Project/now-ui-kit-react-master/src/views/examples/Test.js"],"names":["React","Component","Button","Input","Container","Form","Table","web3","ipfs","storehash","Test","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","eth","getTransactionReceipt","err","console","log","error","onSubmit","ethereum","Web3","enable","accounts","getAccounts","options","address","add","hash","methods","sendHash","send","alert","currentProvider","sendTransaction","render","onClickF"],"mappings":"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","sourcesContent":["import React,{ Component }  from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Input,\r\n  Container,\r\n  Form,\r\n  Table\r\n} from \"reactstrap\";\r\nimport web3 from '../web3';\r\nimport ipfs from './ipfs';\r\nimport storehash from './storehash';\r\n\r\n\r\nclass Test extends Component {\r\n\r\n    state = {\r\n        ipfsHash:null,\r\n        buffer:'',\r\n        ethAddress:'',\r\n        blockNumber:'',\r\n        transactionHash:'',\r\n        gasUsed:'',\r\n        txReceipt: ''   \r\n      };\r\n     \r\n      captureFile =(event) => {\r\n          event.stopPropagation()\r\n          event.preventDefault()\r\n          const file = event.target.files[0]\r\n          let reader = new window.FileReader()\r\n          reader.readAsArrayBuffer(file)\r\n          reader.onloadend = () => this.convertToBuffer(reader)    \r\n        };\r\n  \r\n      convertToBuffer = async(reader) => {\r\n        //file is converted to a buffer to prepare for uploading to IPFS\r\n          const buffer = await Buffer.from(reader.result);\r\n        //set this buffer -using es6 syntax\r\n          this.setState({buffer});\r\n      };\r\n  \r\n      onClick = async () => {\r\n  \r\n      try{\r\n          this.setState({blockNumber:\"waiting..\"});\r\n          this.setState({gasUsed:\"waiting...\"});\r\n  \r\n          // get Transaction Receipt in console on click\r\n          // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\r\n          await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\r\n            console.log(err,txReceipt);\r\n            this.setState({txReceipt});\r\n          }); //await for getTransactionReceipt\r\n  \r\n          await this.setState({blockNumber: this.state.txReceipt.blockNumber});\r\n          await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \r\n        } //try\r\n      catch(error){\r\n          console.log(error);\r\n        } //catch\r\n    }; //onClick\r\n  \r\n      onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (window.ethereum) {\r\n          window.web3 = new Web3(ethereum);\r\n          try {\r\n              // Request account access if needed\r\n              await ethereum.enable();\r\n              // Acccounts now exposed\r\n              \r\n                   //bring in user's metamask account address\r\n                  const accounts = await web3.eth.getAccounts();\r\n                \r\n                  console.log('Sending from Metamask account: ' + accounts[0]);\r\n  \r\n                  //obtain contract address from storehash.js\r\n                  const ethAddress= await storehash.options.address;\r\n                  this.setState({ethAddress});\r\n  \r\n                  //save document to IPFS,return its hash#, and set hash# to state\r\n                  //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \r\n                  await ipfs.add(this.state.buffer, (err, ipfsHash) => {\r\n                    console.log(err,ipfsHash);\r\n                    //setState by setting ipfsHash to ipfsHash[0].hash \r\n                    this.setState({ ipfsHash:ipfsHash[0].hash });\r\n  \r\n                    // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \r\n                    //return the transaction hash from the ethereum contract\r\n                    //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\r\n                    \r\n                    storehash.methods.sendHash(this.state.ipfsHash*10000000000).send({\r\n                      from: accounts[0] \r\n                    }, (error, transactionHash) => {\r\n                      console.log(transactionHash);\r\n                      this.setState({transactionHash});\r\n                    }); //storehash \r\n                  }) //await ipfs.add \r\n  \r\n  \r\n          } catch (error) {\r\n              alert(\"Permission to Access MetaMask Denied\");\r\n          }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n          window.web3 = new Web3(web3.currentProvider);\r\n          // Acccounts always exposed\r\n          web3.eth.sendTransaction({/* ... */});\r\n      }\r\n      // Non-dapp browsers...\r\n      else {\r\n          console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n      }\r\n  \r\n        \r\n      }; //onSubmit \r\n  \r\nrender()\r\n{\r\n      return (\r\n      \r\n         <div className=\"App\">\r\n          <hr />\r\n        <Container>\r\n          <h3> Choose file to send to IPFS </h3>\r\n          <Form onSubmit={this.onSubmit()}>\r\n            <input \r\n              type = \"file\"\r\n              onChange = {this.captureFile()}\r\n            />\r\n             <Button \r\n             variant=\"success\"\r\n             type=\"submit\"> \r\n             Send it \r\n             </Button>\r\n          </Form>\r\n          <hr/>\r\n            <Button onClick = {this.onClickF()}> Get Transaction Receipt </Button>\r\n              <Table bordered responsive>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Tx Receipt Category</th>\r\n                    <th>Values</th>\r\n                  </tr>\r\n                </thead>\r\n               \r\n                <tbody>\r\n                  <tr>\r\n                    <td>IPFS Hash # stored on Eth Contract</td>\r\n                    <td>{this.state.ipfsHash}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Ethereum Contract Address</td>\r\n                    <td>{this.state.ethAddress}</td>\r\n                  </tr>\r\n\r\n                  <tr>\r\n                    <td>Tx Hash # </td>\r\n                    <td>{this.state.transactionHash}</td>\r\n                  </tr>\r\n\r\n                  <tr>\r\n                    <td>Block Number # </td>\r\n                    <td>{this.state.blockNumber}</td>\r\n                  </tr>\r\n\r\n                  <tr>\r\n                    <td>Gas Used</td>\r\n                    <td>{this.state.gasUsed}</td>\r\n                  </tr>                \r\n                </tbody>\r\n            </Table>\r\n        </Container>\r\n     </div>\r\n      \r\n      );\r\n      }\r\n}\r\n\r\nexport default Test;"]},"metadata":{},"sourceType":"module"}